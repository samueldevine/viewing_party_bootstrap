---
http_interactions:
- request:
    method: get
    uri: https://api.themoviedb.org/3/movie/550/reviews?api_key=HIDE MY KEY
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.8.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Date:
      - Wed, 15 Dec 2021 17:34:13 GMT
      Server:
      - openresty
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, HEAD, POST, PUT, DELETE, OPTIONS
      Access-Control-Expose-Headers:
      - ETag, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After,
        Content-Length, Content-Range
      Cache-Control:
      - public, max-age=28800
      X-Memc:
      - HIT
      X-Memc-Key:
      - 1a0260155d4608671f1151503af8455e6394d778
      X-Memc-Age:
      - '2262'
      X-Memc-Expires:
      - '14704'
      Etag:
      - W/"75473b0a707c180ec78a436f63a9cba7"
      Vary:
      - Accept-Encoding
      X-Cache:
      - Hit from cloudfront
      Via:
      - 1.1 43684cbde7a46ef5524f47bc4254eff9.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - ORD51-C4
      X-Amz-Cf-Id:
      - zbQb5zZWXRGny7NfjuFMiO6onkIz9Uo-5MS4s42z4Q4B2jkebI0iNA==
      Age:
      - '7'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 15 Dec 2021 17:34:20 GMT
recorded_with: VCR 6.0.0
